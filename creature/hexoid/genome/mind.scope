module.exports = {
	'float muTempMind': 0.05,
	
	'float mutateRate_addNodeToActor' : 0.5,
	'int2  mutateRate_addNodeToActorC': [1,2],
	
	'float mutateRate_addActor'      : 0.05,

	'void .remove()': `
		.nodes   { .delete(); };
		.links   { .delete(); };
		.actors  { .delete(); };
		.recepts { .delete(); };
		.delete();
	`,
	
	
	genome : 'Genome',
	
	nodes  : ['Node @mind'],
	links  : ['Link @mind'],
	
	Node: {
		MAX: Scope_MAX_BIG * 2,
		
		
		i    : 'int',
		
		
		pos  : 'vbo float2',
		rgb  : 'vbo float3',
		
		v    : 'float',
		v_   : 'float',
		k    : 'float',
		frict: 'float',
		speed: 'float',
	},
	'some .nodesAdd()': `
		some mind = .;
		
		.nodes.new {
			.i      = mind.nodes.length - 1;
			
			.pos    = ri2xy( 1, .i );
			.pos.y += 15;
			.pos.x -=  5;
			
			.v     = Random.get() * 2  - 1;
			.k     = Random.get() * 20 - 10;
			.frict = Random.get();
			.speed = Random.get() / 5;
			
			return .;
		};
	`,
	
	Link: {
		MAX: Scope_MAX_BIG * 2.5 * 2,
		
		i: 'int',
		
		f: 'Node @[links_f]',
		t: 'Node @[links_t]',
		
		
		v: 'float',
		k: 'float',
	},
	'some .linksAddRandom()': `
		some mind = .;
		
		.links.new {
			.i = mind.links.length - 1;
			
			.f = mind.nodes[ Random.getInt( mind.nodes.length ) ];
			.t = mind.nodes[ Random.getInt( mind.nodes.length ) ];
			
			.k = Random.get() * 20 - 10;
			
			return .;
		};
	`,
	
	'some generate()': `
		Self.new {
			some mind = .;
			
			
			
			
			int nCount = Random.between( nodesCountMind );
			for ( int x = 0; x < nCount; x++ ){
				.nodesAdd();
			};
			.nodes.vectorize();
			
			
			int lCount = Random.between( linksCountMind );
			for ( int x = 0; x < lCount; x++ ){
				.linksAddRandom();
			};
			.links.vectorize();
			
			return .;
		};
	`,
	
	'some .clone( int _body )': `
		
		
		some genome2 = .;
		some body    = Body[ _body ];
		
		Self.new {
			some mind = .;
			
			.nodes.allocate( genome2.nodes.length, int x ) {
				some gen3 = genome2.nodes[x];
				
				.i    = x;
				
				.pos  = gen3.pos;
				
				.v     = gen3.v    ;
				.v_    = gen3.v_   ;
				.k     = gen3.k    ;
				.frict = gen3.frict;
				.speed = gen3.speed;
			};
			
			.links.allocate( genome2.links.length, int x ) {
				some gen4 = genome2.links[x];
				
				.i    = x;
				
				.f    = mind.nodes[ gen4.f.i ];
				.t    = mind.nodes[ gen4.t.i ];
				
				.v    = gen4.v;
				.k    = gen4.k;
			};
			
			.actors.allocate( genome2.actors.length, int x ){
				some gen5 = genome2.actors[x];
				
				.neuron = mind.nodes[ gen5.neuron.i ];
				
				
				some actor = .;
				
				gen5.links {
					some link = body.links[ .i ];
					actor.links.push( link );
				};
				
				gen5.nodes {
					
					some node = body.nodes[ .i ];
					actor.nodes.push( node );
				};
			};
			
			.recepts.allocate( genome2.recepts.length, int x ){
				some gen6 = genome2.recepts[x];
				
				.neuronX = mind.nodes[ gen6.neuronX.i ];
				.neuronY = mind.nodes[ gen6.neuronY.i ];
				.node    = body.nodes[ gen6.node.i    ];
			};
			
			return .;
		};
	`,
	
	'void .mutate()': `
		float mutat = 1 + Random.get() * muTempMind;
		
		
		.nodes {
			.k     *= __powf( mutat, Random.get() * 2 - 1 );
			.frict *= __powf( mutat, Random.get() * 2 - 1 );
			.speed *= __powf( mutat, Random.get() * 2 - 1 );
		};
		
		.links {
			.k *= __powf( mutat, Random.get() * 2 - 1 );
		};
		
		some genome = .genome;
		
		int2 acount = actorsCount;
		
		if ( Random.get() > mutateRate_addActor && .actors.length < acount.y ){
			some actor2 = .addActor( genome );
			
			.actors.vectorize();
		};
		
		
		if ( Random.get() > mutateRate_addNodeToActor ){
			some actor = .actors[ Random.getInt( .actors.length ) ];
			
			
			
			actor.genome = genome;
			
			int pC = Random.between( mutateRate_addNodeToActorC );
			for ( int p = 0; p < pC; p++ ){
				actor.addNode();
			};
			
			actor.nodes.vectorize();
			actor.links.vectorize();
		};
	`,
	
	actors: ['Actor'],
	
	
	Actor : {
		MAX: Scope_MAX_BIG,
		
		i     : 'int',
		
		genome: 'Genome',
		neuron: 'Mind.Node',
		
		links : ['Body.Link'],
		nodes : ['Body.Node'],
		
		'some .addNode()': `
			some actor = .;
			
			some body  = actor.genome.body;
			some node  = body.nodes[ Random.getInt( body.nodes.length ) ];
			
			int flag = 0;
			actor.nodes { if ( . == node ) flag = 1; };
			
			if ( !flag ){
				node.shift += (float)(actor.i) / 10.0f;
				
				actor.nodes.push( node );
			};
			
			
			body.links {
				some link7 = .;
				
				int flag = 0; actor.nodes { if ( link7.f == . || link7.t == . ) flag = 1; };
				
				if ( flag ){
					int flag2 = 1; actor.links { if ( link7 == . ) flag2 = 0; };
					
					if ( flag2 ){
						actor.links.push( link7 );
					};
				};
			};
			
			return node;
		`,
	},
	
	'some .addActor( int _genome )': `
		some mind   = .;
		some genome = Genome[ _genome ]; 
		
		.actors.new {
			some actor = .;
			
			.i = mind.actors.length - 1;
			
			.genome = genome;
			
			actor.neuron = genome.mind.nodes[ Random.getInt( genome.mind.nodes.length ) ];
			
			for ( int i = 0; i < Random.between( nodesToMuscle ); i++ ){
				.addNode();
			};
			
			
			actor.nodes.vectorize();
			actor.links.vectorize();
			
			return .;
		};
	`,
	
	recepts: ['Recept @mind'],
	Recept : {
		MAX: Scope_MAX_BIG,
		
		neuronX: 'Mind.Node',
		neuronY: 'Mind.Node',
		node   : 'Body.Node',
	},
};
